// this overrides vendor classes of node created outside the main viewer container
// this is why it's special :)

// to avoid IE11 vertical scrollbar to overlapp content in full screen mode
// reference: https://github.com/twbs/bootstrap/issues/18543
html, body {
    -ms-overflow-style: scrollbar;
}

.rv-hide {
    visibility: hidden !important;
    opacity: 0 !important;
}

.rv-hide-animate {
    display: inherit;
    opacity: 1;
    transition: opacity $swift-ease-in-duration $swift-ease-in-out-timing-function;
}

.rv-scrollbar-measure {
    width: rem(10);
    height: rem(10);
    overflow: scroll;
    position: absolute;
    top: - rem(999);
}

md-sidenav {
    display: flex;
}

md-menu-bar {
    padding: 0;
}

md-menu-content {
    // a bit of hack on top of the md-menu-item
    // the original uses absolute positioning inside a menubar menu, since we are not using menubar, it breaks;
    // so we have to add some stuff

    // since menus are rendered outside of the viewer's container, need to explicitly apply font and colour to them
    color: $primary-text-color;
    font-family: $font-family;

    md-menu-item {

        &[rv-right-icon] .md-button {
            padding-right: rem(1.6) !important;

            md-icon:last-of-type {
                margin-right: 0;
            }
        }

        &[rv-right-icon="true"] .md-button {
            padding-left: rem(1.6) + rem(4);
        }

        &[type='radio'],
        &[type='checkbox'] {
            &.md-indent {
                .md-button[aria-checked="true"] {
                    padding-left: rem(1.6) !important;
                }

                // indent menu items which are not selected
                .md-button[aria-checked="false"] {
                    padding-left: rem(1.6) + rem(2.4) + rem(1.6) !important;
                }
            }
        }
    }

    &.rv-menu {
        max-height: rem(40);
        // hide divider if it's the first or the last item in the menu
        md-menu-divider {

            &:first-child,
            &:last-child {
                display: none;
            }
        }
    }

    &.rv-dense {

        md-menu-divider {
            margin: rem(0.4) 0 !important;
        }

        padding: rem(0.8) 0 !important;

        md-menu-item {
            min-height: rem(3.6);
            height: rem(3.6);

            > .md-button {
                height: 100% !important;

                .rv-button-flex {
                    width: 100%;
                    display: flex;

                    span {
                        flex: 1;
                    }

                    .rv-alt-icon {
                        margin: {
                            right: rem(0.8);
                            left: rem(0.8);
                        }
                    }
                }
            }
        }
    }
}

// visually highlights selected layer item in the list
md-select-menu {
    font-family: $font-family;

    &[multiple] {
        md-option {

            &:before {
                position: absolute;
                content: "";
                background-color: transparent;
                width: rem(0.5);
                left: 0;
                height: 100%;
                top: 0;
                transition: background-color $swift-ease-in-duration $swift-ease-in-out-timing-function;
            }

            // selection indicator
            &[selected="selected"] {
                color: black;

                // the colour md-buttons get on hover
                background-color: rgba(158,158,158,0.2);

                &:before {
                    background-color: $accent-color;
                }
            }
        }
    }
}

.rv-full-screen {
    visibility: hidden;

    // aria-hidden="false" will be read even though visibility set to hidden; need to completely hide it
    [aria-hidden="false"] {
        display: none;
    }

    // all angular material components rendered outside of the viewer should be visible
    > [class*="md-"],
    .fgpv {
        visibility: visible;

        // no need to hide item inside the viewer
        &[aria-hidden="false"],
        [aria-hidden="false"] {
            display: inherit;
        }
    }
}